import e from"pbkdf2-hmac";const r=function(e){function r(e,r){return e<<r|e>>>32-r}const t=e.slice(0);for(let e=8;e>0;e-=2)t[4]^=r(t[0]+t[12],7),t[8]^=r(t[4]+t[0],9),t[12]^=r(t[8]+t[4],13),t[0]^=r(t[12]+t[8],18),t[9]^=r(t[5]+t[1],7),t[13]^=r(t[9]+t[5],9),t[1]^=r(t[13]+t[9],13),t[5]^=r(t[1]+t[13],18),t[14]^=r(t[10]+t[6],7),t[2]^=r(t[14]+t[10],9),t[6]^=r(t[2]+t[14],13),t[10]^=r(t[6]+t[2],18),t[3]^=r(t[15]+t[11],7),t[7]^=r(t[3]+t[15],9),t[11]^=r(t[7]+t[3],13),t[15]^=r(t[11]+t[7],18),t[1]^=r(t[0]+t[3],7),t[2]^=r(t[1]+t[0],9),t[3]^=r(t[2]+t[1],13),t[0]^=r(t[3]+t[2],18),t[6]^=r(t[5]+t[4],7),t[7]^=r(t[6]+t[5],9),t[4]^=r(t[7]+t[6],13),t[5]^=r(t[4]+t[7],18),t[11]^=r(t[10]+t[9],7),t[8]^=r(t[11]+t[10],9),t[9]^=r(t[8]+t[11],13),t[10]^=r(t[9]+t[8],18),t[12]^=r(t[15]+t[14],7),t[13]^=r(t[12]+t[15],9),t[14]^=r(t[13]+t[12],13),t[15]^=r(t[14]+t[13],18);for(let r=0;r<16;r++)e[r]=t[r]+e[r]},t=function(e,r){for(let t=0;t<e.length;t++)e[t]^=r[t]},n=function(e){const n=e.byteLength/128,i=16*(2*n-1),o=e.slice(i,i+16),f=new Uint32Array(e.length/2);let s=!0;for(let i=0;i<2*n;i++){const n=16*i,a=e.subarray(n,n+16);t(o,a),r(o);const u=16*(i>>1);if(s)for(let r=0;r<16;r++)e[u+r]=o[r];else for(let e=0;e<16;e++)f[u+e]=o[e];s=!s}const a=16*n;for(let r=0;r<a;r++)e[a+r]=f[r]},i=function(e,r){const i=e.byteLength/128,o=new Array(r);for(let t=0;t<r;t++)o[t]=e.slice(0),n(e);function f(e){const t=64*(2*i-1);return new DataView(e.buffer,t,64).getUint32(0,!0)%r}for(let i=0;i<r;i++){const r=f(e);t(e,o[r]),n(e)}},o=async function(r,t,n,o){if("string"==typeof r)r=(new TextEncoder).encode(r);else if(r instanceof ArrayBuffer)r=new Uint8Array(r);else if(!ArrayBuffer.isView(r))throw RangeError("P should be string, ArrayBuffer, TypedArray, DataView");if("string"==typeof t)t=(new TextEncoder).encode(t);else if(t instanceof ArrayBuffer)t=new Uint8Array(t);else if(!ArrayBuffer.isView(t))throw RangeError("S should be string, ArrayBuffer, TypedArray, DataView");if(!Number.isInteger(n)||n<=0||n>137438953440)throw RangeError("dkLen is the intended output length in octets of the derived key; a positive integer less than or equal to (2^32 - 1) * hLen where hLen is 32");const f=void 0!==o&&void 0!==o.N?o.N:131072,s=void 0!==o&&void 0!==o.r?o.r:8,a=void 0!==o&&void 0!==o.p?o.p:1;if(!Number.isInteger(f)||f<=0||0!=(f&f-1))throw RangeError("N must be a power of 2");if(!Number.isInteger(s)||s<=0||!Number.isInteger(a)||a<=0||a*s>1073741823.75)throw RangeError("Parallelization parameter p and blocksize parameter r must be positive integers satisfying p ≤ (2^32− 1) * hLen / MFLen where hLen is 32 and MFlen is 128 * r.");const u=await e(r,t,1,128*a*s),c=new Uint32Array(u);for(let e=0;e<a;e++){const r=32*s,t=e*r,n=c.slice(t,t+r);i(n,f);for(let e=0;e<32*s;e++)c[t+e]=n[e]}return await e(r,c,1,n)},f=function(e=16){if(!Number.isInteger(e)||e<0)throw new RangeError("length must be integer >= 0");return 0===e?new ArrayBuffer(0):crypto.getRandomValues(new Uint8Array(e)).buffer};export{r as salsa208Core,f as salt,o as scrypt,n as scryptBlockMix,i as scryptROMix};
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaW5kZXguYnJvd3Nlci5lc20uanMiLCJzb3VyY2VzIjpbIi4uL3NyYy90cy9zYWxzYTIwOENvcmUudHMiLCIuLi9zcmMvdHMvdHlwZWRBcnJheVhvci50cyIsIi4uL3NyYy90cy9zY3J5cHRCbG9ja01peC50cyIsIi4uL3NyYy90cy9zY3J5cHRSb21NaXgudHMiLCIuLi9zcmMvdHMvc2NyeXB0LnRzIiwiLi4vc3JjL3RzL3NhbHQudHMiXSwic291cmNlc0NvbnRlbnQiOm51bGwsIm5hbWVzIjpbInNhbHNhMjA4Q29yZSIsImFyciIsIlIiLCJhIiwiYiIsIngiLCJzbGljZSIsImkiLCJ0eXBlZEFycmF5WG9yIiwiYXJyMSIsImFycjIiLCJsZW5ndGgiLCJzY3J5cHRCbG9ja01peCIsIkIiLCJyIiwiYnl0ZUxlbmd0aCIsIm9mZnNldDMyIiwiWCIsIllvZGQiLCJVaW50MzJBcnJheSIsImV2ZW4iLCJvZmZzZXQiLCJCaSIsInN1YmFycmF5Iiwib2ZmMiIsImoiLCJoYWxmSW5kZXgiLCJzY3J5cHRST01peCIsIk4iLCJWIiwiQXJyYXkiLCJpbnRlZ2VyaWZ5TW9kTiIsIlVpbnQzMmFyciIsIkRhdGFWaWV3IiwiYnVmZmVyIiwiZ2V0VWludDMyIiwic2NyeXB0IiwiYXN5bmMiLCJQIiwiUyIsImRrTGVuIiwic2NyeXB0UGFyYW1zIiwiVGV4dEVuY29kZXIiLCJlbmNvZGUiLCJBcnJheUJ1ZmZlciIsIlVpbnQ4QXJyYXkiLCJpc1ZpZXciLCJSYW5nZUVycm9yIiwiTnVtYmVyIiwiaXNJbnRlZ2VyIiwidW5kZWZpbmVkIiwicCIsInBia2RmMkhtYWMiLCJCMzIiLCJibG9ja0xlbmd0aDMyIiwic2FsdCIsImNyeXB0byIsImdldFJhbmRvbVZhbHVlcyJdLCJtYXBwaW5ncyI6IjJCQVdNLE1BQUFBLEVBQWUsU0FBVUMsR0FDN0IsU0FBU0MsRUFBR0MsRUFBV0MsR0FDckIsT0FBUUQsR0FBS0MsRUFBTUQsSUFBTyxHQUFLQyxDQUNoQyxDQUVELE1BQU1DLEVBQUlKLEVBQUlLLE1BQU0sR0FDcEIsSUFBSyxJQUFJQyxFQUFJLEVBQUdBLEVBQUksRUFBR0EsR0FBSyxFQUMxQkYsRUFBRSxJQUFNSCxFQUFFRyxFQUFFLEdBQUtBLEVBQUUsSUFBSyxHQUN4QkEsRUFBRSxJQUFNSCxFQUFFRyxFQUFFLEdBQUtBLEVBQUUsR0FBSSxHQUN2QkEsRUFBRSxLQUFPSCxFQUFFRyxFQUFFLEdBQUtBLEVBQUUsR0FBSSxJQUN4QkEsRUFBRSxJQUFNSCxFQUFFRyxFQUFFLElBQU1BLEVBQUUsR0FBSSxJQUN4QkEsRUFBRSxJQUFNSCxFQUFFRyxFQUFFLEdBQUtBLEVBQUUsR0FBSSxHQUN2QkEsRUFBRSxLQUFPSCxFQUFFRyxFQUFFLEdBQUtBLEVBQUUsR0FBSSxHQUN4QkEsRUFBRSxJQUFNSCxFQUFFRyxFQUFFLElBQU1BLEVBQUUsR0FBSSxJQUN4QkEsRUFBRSxJQUFNSCxFQUFFRyxFQUFFLEdBQUtBLEVBQUUsSUFBSyxJQUN4QkEsRUFBRSxLQUFPSCxFQUFFRyxFQUFFLElBQU1BLEVBQUUsR0FBSSxHQUN6QkEsRUFBRSxJQUFNSCxFQUFFRyxFQUFFLElBQU1BLEVBQUUsSUFBSyxHQUN6QkEsRUFBRSxJQUFNSCxFQUFFRyxFQUFFLEdBQUtBLEVBQUUsSUFBSyxJQUN4QkEsRUFBRSxLQUFPSCxFQUFFRyxFQUFFLEdBQUtBLEVBQUUsR0FBSSxJQUN4QkEsRUFBRSxJQUFNSCxFQUFFRyxFQUFFLElBQU1BLEVBQUUsSUFBSyxHQUN6QkEsRUFBRSxJQUFNSCxFQUFFRyxFQUFFLEdBQUtBLEVBQUUsSUFBSyxHQUN4QkEsRUFBRSxLQUFPSCxFQUFFRyxFQUFFLEdBQUtBLEVBQUUsR0FBSSxJQUN4QkEsRUFBRSxLQUFPSCxFQUFFRyxFQUFFLElBQU1BLEVBQUUsR0FBSSxJQUN6QkEsRUFBRSxJQUFNSCxFQUFFRyxFQUFFLEdBQUtBLEVBQUUsR0FBSSxHQUN2QkEsRUFBRSxJQUFNSCxFQUFFRyxFQUFFLEdBQUtBLEVBQUUsR0FBSSxHQUN2QkEsRUFBRSxJQUFNSCxFQUFFRyxFQUFFLEdBQUtBLEVBQUUs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
