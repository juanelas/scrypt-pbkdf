import"pbkdf2-hmac";import{webcrypto as e}from"crypto";const r=function(e){function r(e,r){return e<<r|e>>>32-r}const t=e.slice(0);for(let e=8;e>0;e-=2)t[4]^=r(t[0]+t[12],7),t[8]^=r(t[4]+t[0],9),t[12]^=r(t[8]+t[4],13),t[0]^=r(t[12]+t[8],18),t[9]^=r(t[5]+t[1],7),t[13]^=r(t[9]+t[5],9),t[1]^=r(t[13]+t[9],13),t[5]^=r(t[1]+t[13],18),t[14]^=r(t[10]+t[6],7),t[2]^=r(t[14]+t[10],9),t[6]^=r(t[2]+t[14],13),t[10]^=r(t[6]+t[2],18),t[3]^=r(t[15]+t[11],7),t[7]^=r(t[3]+t[15],9),t[11]^=r(t[7]+t[3],13),t[15]^=r(t[11]+t[7],18),t[1]^=r(t[0]+t[3],7),t[2]^=r(t[1]+t[0],9),t[3]^=r(t[2]+t[1],13),t[0]^=r(t[3]+t[2],18),t[6]^=r(t[5]+t[4],7),t[7]^=r(t[6]+t[5],9),t[4]^=r(t[7]+t[6],13),t[5]^=r(t[4]+t[7],18),t[11]^=r(t[10]+t[9],7),t[8]^=r(t[11]+t[10],9),t[9]^=r(t[8]+t[11],13),t[10]^=r(t[9]+t[8],18),t[12]^=r(t[15]+t[14],7),t[13]^=r(t[12]+t[15],9),t[14]^=r(t[13]+t[12],13),t[15]^=r(t[14]+t[13],18);for(let r=0;r<16;r++)e[r]=t[r]+e[r]},t=function(e,r){for(let t=0;t<e.length;t++)e[t]^=r[t]},n=function(e){const n=e.byteLength/128,i=16*(2*n-1),o=e.slice(i,i+16),f=new Uint32Array(e.length/2);let s=!0;for(let i=0;i<2*n;i++){const n=16*i,a=e.subarray(n,n+16);t(o,a),r(o);const u=16*(i>>1);if(s)for(let r=0;r<16;r++)e[u+r]=o[r];else for(let e=0;e<16;e++)f[u+e]=o[e];s=!s}const a=16*n;for(let r=0;r<a;r++)e[a+r]=f[r]},i=function(e,r){const i=e.byteLength/128,o=new Array(r);for(let t=0;t<r;t++)o[t]=e.slice(0),n(e);function f(e){const t=64*(2*i-1);return new DataView(e.buffer,t,64).getUint32(0,!0)%r}for(let i=0;i<r;i++){const r=f(e);t(e,o[r]),n(e)}},o=async function(e,r,t,n){if("string"==typeof e)e=(new TextEncoder).encode(e);else if(e instanceof ArrayBuffer)e=new Uint8Array(e);else if(!ArrayBuffer.isView(e))throw RangeError("P should be string, ArrayBuffer, TypedArray, DataView");if("string"==typeof r)r=(new TextEncoder).encode(r);else if(r instanceof ArrayBuffer)r=new Uint8Array(r);else if(!ArrayBuffer.isView(r))throw RangeError("S should be string, ArrayBuffer, TypedArray, DataView");if(!Number.isInteger(t)||t<=0||t>137438953440)throw RangeError("dkLen is the intended output length in octets of the derived key; a positive integer less than or equal to (2^32 - 1) * hLen where hLen is 32");const i=void 0!==n&&void 0!==n.N?n.N:131072,o=void 0!==n&&void 0!==n.r?n.r:8,f=void 0!==n&&void 0!==n.p?n.p:1;if(!Number.isInteger(i)||i<=0||0!=(i&i-1))throw RangeError("N must be a power of 2");if(!Number.isInteger(o)||o<=0||!Number.isInteger(f)||f<=0||f*o>1073741823.75)throw RangeError("Parallelization parameter p and blocksize parameter r must be positive integers satisfying p ≤ (2^32− 1) * hLen / MFLen where hLen is 32 and MFlen is 128 * r.");return(await import("crypto")).scryptSync(e,r,t,{N:i,r:o,p:f,maxmem:160*i*o}).buffer},f=function(r=16){if(!Number.isInteger(r)||r<0)throw new RangeError("length must be integer >= 0");return 0===r?new ArrayBuffer(0):e.getRandomValues(new Uint8Array(r)).buffer};export{r as salsa208Core,f as salt,o as scrypt,n as scryptBlockMix,i as scryptROMix};
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaW5kZXgubm9kZS5lc20uanMiLCJzb3VyY2VzIjpbIi4uL3NyYy90cy9zYWxzYTIwOENvcmUudHMiLCIuLi9zcmMvdHMvdHlwZWRBcnJheVhvci50cyIsIi4uL3NyYy90cy9zY3J5cHRCbG9ja01peC50cyIsIi4uL3NyYy90cy9zY3J5cHRSb21NaXgudHMiLCIuLi9zcmMvdHMvc2NyeXB0LnRzIiwiLi4vc3JjL3RzL3NhbHQudHMiXSwic291cmNlc0NvbnRlbnQiOm51bGwsIm5hbWVzIjpbInNhbHNhMjA4Q29yZSIsImFyciIsIlIiLCJhIiwiYiIsIngiLCJzbGljZSIsImkiLCJ0eXBlZEFycmF5WG9yIiwiYXJyMSIsImFycjIiLCJsZW5ndGgiLCJzY3J5cHRCbG9ja01peCIsIkIiLCJyIiwiYnl0ZUxlbmd0aCIsIm9mZnNldDMyIiwiWCIsIllvZGQiLCJVaW50MzJBcnJheSIsImV2ZW4iLCJvZmZzZXQiLCJCaSIsInN1YmFycmF5Iiwib2ZmMiIsImoiLCJoYWxmSW5kZXgiLCJzY3J5cHRST01peCIsIk4iLCJWIiwiQXJyYXkiLCJpbnRlZ2VyaWZ5TW9kTiIsIlVpbnQzMmFyciIsIkRhdGFWaWV3IiwiYnVmZmVyIiwiZ2V0VWludDMyIiwic2NyeXB0IiwiYXN5bmMiLCJQIiwiUyIsImRrTGVuIiwic2NyeXB0UGFyYW1zIiwiVGV4dEVuY29kZXIiLCJlbmNvZGUiLCJBcnJheUJ1ZmZlciIsIlVpbnQ4QXJyYXkiLCJpc1ZpZXciLCJSYW5nZUVycm9yIiwiTnVtYmVyIiwiaXNJbnRlZ2VyIiwidW5kZWZpbmVkIiwicCIsImltcG9ydCIsInNjcnlwdFN5bmMiLCJtYXhtZW0iLCJzYWx0IiwiY3J5cHRvIiwiZ2V0UmFuZG9tVmFsdWVzIl0sIm1hcHBpbmdzIjoidURBV00sTUFBQUEsRUFBZSxTQUFVQyxHQUM3QixTQUFTQyxFQUFHQyxFQUFXQyxHQUNyQixPQUFRRCxHQUFLQyxFQUFNRCxJQUFPLEdBQUtDLENBQ2hDLENBRUQsTUFBTUMsRUFBSUosRUFBSUssTUFBTSxHQUNwQixJQUFLLElBQUlDLEVBQUksRUFBR0EsRUFBSSxFQUFHQSxHQUFLLEVBQzFCRixFQUFFLElBQU1ILEVBQUVHLEVBQUUsR0FBS0EsRUFBRSxJQUFLLEdBQ3hCQSxFQUFFLElBQU1ILEVBQUVHLEVBQUUsR0FBS0EsRUFBRSxHQUFJLEdBQ3ZCQSxFQUFFLEtBQU9ILEVBQUVHLEVBQUUsR0FBS0EsRUFBRSxHQUFJLElBQ3hCQSxFQUFFLElBQU1ILEVBQUVHLEVBQUUsSUFBTUEsRUFBRSxHQUFJLElBQ3hCQSxFQUFFLElBQU1ILEVBQUVHLEVBQUUsR0FBS0EsRUFBRSxHQUFJLEdBQ3ZCQSxFQUFFLEtBQU9ILEVBQUVHLEVBQUUsR0FBS0EsRUFBRSxHQUFJLEdBQ3hCQSxFQUFFLElBQU1ILEVBQUVHLEVBQUUsSUFBTUEsRUFBRSxHQUFJLElBQ3hCQSxFQUFFLElBQU1ILEVBQUVHLEVBQUUsR0FBS0EsRUFBRSxJQUFLLElBQ3hCQSxFQUFFLEtBQU9ILEVBQUVHLEVBQUUsSUFBTUEsRUFBRSxHQUFJLEdBQ3pCQSxFQUFFLElBQU1ILEVBQUVHLEVBQUUsSUFBTUEsRUFBRSxJQUFLLEdBQ3pCQSxFQUFFLElBQU1ILEVBQUVHLEVBQUUsR0FBS0EsRUFBRSxJQUFLLElBQ3hCQSxFQUFFLEtBQU9ILEVBQUVHLEVBQUUsR0FBS0EsRUFBRSxHQUFJLElBQ3hCQSxFQUFFLElBQU1ILEVBQUVHLEVBQUUsSUFBTUEsRUFBRSxJQUFLLEdBQ3pCQSxFQUFFLElBQU1ILEVBQUVHLEVBQUUsR0FBS0EsRUFBRSxJQUFLLEdBQ3hCQSxFQUFFLEtBQU9ILEVBQUVHLEVBQUUsR0FBS0EsRUFBRSxHQUFJLElBQ3hCQSxFQUFFLEtBQU9ILEVBQUVHLEVBQUUsSUFBTUEsRUFBRSxHQUFJLElBQ3pCQSxFQUFFLElBQU1ILEVBQUVHLEVBQUUsR0FBS0EsRUFBRSxHQUFJLEdBQ3ZCQSxFQUFFLElBQU1ILEVBQUVHLEVBQUUsR0FBS0EsRUFBRSxHQUFJLEdBQ3ZCQSxFQUFFLElBQU1ILEVBQUVHLEVBQUUsR0FBS0EsRUFBRSxHQUFJLElB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
