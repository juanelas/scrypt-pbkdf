const e=function(e){function r(e,r){return e<<r|e>>>32-r}const t=e.slice(0);for(let e=8;e>0;e-=2)t[4]^=r(t[0]+t[12],7),t[8]^=r(t[4]+t[0],9),t[12]^=r(t[8]+t[4],13),t[0]^=r(t[12]+t[8],18),t[9]^=r(t[5]+t[1],7),t[13]^=r(t[9]+t[5],9),t[1]^=r(t[13]+t[9],13),t[5]^=r(t[1]+t[13],18),t[14]^=r(t[10]+t[6],7),t[2]^=r(t[14]+t[10],9),t[6]^=r(t[2]+t[14],13),t[10]^=r(t[6]+t[2],18),t[3]^=r(t[15]+t[11],7),t[7]^=r(t[3]+t[15],9),t[11]^=r(t[7]+t[3],13),t[15]^=r(t[11]+t[7],18),t[1]^=r(t[0]+t[3],7),t[2]^=r(t[1]+t[0],9),t[3]^=r(t[2]+t[1],13),t[0]^=r(t[3]+t[2],18),t[6]^=r(t[5]+t[4],7),t[7]^=r(t[6]+t[5],9),t[4]^=r(t[7]+t[6],13),t[5]^=r(t[4]+t[7],18),t[11]^=r(t[10]+t[9],7),t[8]^=r(t[11]+t[10],9),t[9]^=r(t[8]+t[11],13),t[10]^=r(t[9]+t[8],18),t[12]^=r(t[15]+t[14],7),t[13]^=r(t[12]+t[15],9),t[14]^=r(t[13]+t[12],13),t[15]^=r(t[14]+t[13],18);for(let r=0;r<16;r++)e[r]=t[r]+e[r]},r=function(e,r){for(let t=0;t<e.length;t++)e[t]^=r[t]},t=function(t){const n=t.byteLength/128,o=16*(2*n-1),i=t.slice(o,o+16),a=new Uint32Array(t.length/2);let s=!0;for(let o=0;o<2*n;o++){const n=16*o,f=t.subarray(n,n+16);r(i,f),e(i);const u=16*(o>>1);if(s)for(let e=0;e<16;e++)t[u+e]=i[e];else for(let e=0;e<16;e++)a[u+e]=i[e];s=!s}const f=16*n;for(let e=0;e<f;e++)t[f+e]=a[e]},n=function(e,n){const o=e.byteLength/128,i=new Array(n);for(let r=0;r<n;r++)i[r]=e.slice(0),t(e);function a(e){const r=64*(2*o-1);return new DataView(e.buffer,r,64).getUint32(0,!0)%n}for(let o=0;o<n;o++){const n=a(e);r(e,i[n]),t(e)}},o={"SHA-1":{outputLength:20,blockSize:64},"SHA-256":{outputLength:32,blockSize:64},"SHA-384":{outputLength:48,blockSize:128},"SHA-512":{outputLength:64,blockSize:128}};function i(e,r,t,n,i="SHA-256"){return new Promise(((f,u)=>{i in o||u(new RangeError(`Valid hash algorithm values are any of ${Object.keys(o).toString()}`)),"string"==typeof e?e=(new TextEncoder).encode(e):e instanceof ArrayBuffer?e=new Uint8Array(e):ArrayBuffer.isView(e)||u(RangeError("P should be string, ArrayBuffer, TypedArray, DataView")),"string"==typeof r?r=(new TextEncoder).encode(r):r instanceof ArrayBuffer?r=new Uint8Array(r):ArrayBuffer.isView(r)?r=new Uint8Array(r.buffer,r.byteOffset,r.byteLength):u(RangeError("S should be string, ArrayBuffer, TypedArray, DataView")),crypto.subtle.importKey("raw",e,"PBKDF2",!1,["deriveBits"]).then((c=>{const l={name:"PBKDF2",hash:i,salt:r,iterations:t};crypto.subtle.deriveBits(l,c,8*n).then((e=>f(e)),(c=>{(async function(e,r,t,n,i){if(!(i in o))throw new RangeError(`Valid hash algorithm values are any of ${Object.keys(o).toString()}`);if(!Number.isInteger(t)||t<=0)throw new RangeError("c must be a positive integer");const f=o[i].outputLength;if(!Number.isInteger(n)||n<=0||n>=(2**32-1)*f)throw new RangeError("dkLen must be a positive integer < (2 ** 32 - 1) * hLen");const u=Math.ceil(n/f),c=n-(u-1)*f,l=new Array(u);0===e.byteLength&&(e=new Uint8Array(o[i].blockSize));const y=await crypto.subtle.importKey("raw",e,{name:"HMAC",hash:{name:i}},!0,["sign"]),w=async function(e,r){const t=await crypto.subtle.sign("HMAC",e,r);return new Uint8Array(t)};for(let e=0;e<u;e++)l[e]=await g(y,r,t,e+1);async function g(e,r,t,n){const o=await w(e,a(r,function(e){const r=new ArrayBuffer(4);return new DataView(r).setUint32(0,e,!1),new Uint8Array(r)}(n)));let i=o;for(let r=1;r<t;r++)i=await w(e,i),s(o,i);return o}return l[u-1]=l[u-1].slice(0,c),a(...l).buffer})(e,r,t,n,i).then((e=>f(e)),(e=>u(e)))}))}),(e=>u(e)))}))}function a(...e){const r=e.reduce(((e,r)=>e+r.length),0);if(0===e.length)throw new RangeError("Cannot concat no arrays");const t=new Uint8Array(r);let n=0;for(const r of e)t.set(r,n),n+=r.length;return t}function s(e,r){for(let t=0;t<e.length;t++)e[t]^=r[t]}const f=async function(e,r,t,o){if("string"==typeof e)e=(new TextEncoder).encode(e);else if(e instanceof ArrayBuffer)e=new Uint8Array(e);else if(!ArrayBuffer.isView(e))throw RangeError("P should be string, ArrayBuffer, TypedArray, DataView");if("string"==typeof r)r=(new TextEncoder).encode(r);else if(r instanceof ArrayBuffer)r=new Uint8Array(r);else if(!ArrayBuffer.isView(r))throw RangeError("S should be string, ArrayBuffer, TypedArray, DataView");if(!Number.isInteger(t)||t<=0||t>137438953440)throw RangeError("dkLen is the intended output length in octets of the derived key; a positive integer less than or equal to (2^32 - 1) * hLen where hLen is 32");const a=void 0!==o&&void 0!==o.N?o.N:131072,s=void 0!==o&&void 0!==o.r?o.r:8,f=void 0!==o&&void 0!==o.p?o.p:1;if(!Number.isInteger(a)||a<=0||0!=(a&a-1))throw RangeError("N must be a power of 2");if(!Number.isInteger(s)||s<=0||!Number.isInteger(f)||f<=0||f*s>1073741823.75)throw RangeError("Parallelization parameter p and blocksize parameter r must be positive integers satisfying p ≤ (2^32− 1) * hLen / MFLen where hLen is 32 and MFlen is 128 * r.");const u=await i(e,r,1,128*f*s),c=new Uint32Array(u);for(let e=0;e<f;e++){const r=32*s,t=e*r,o=c.slice(t,t+r);n(o,a);for(let e=0;e<32*s;e++)c[t+e]=o[e]}return await i(e,c,1,t)},u=function(e=16){if(!Number.isInteger(e)||e<0)throw new RangeError("length must be integer >= 0");return 0===e?new ArrayBuffer(0):crypto.getRandomValues(new Uint8Array(e)).buffer};export{e as salsa208Core,u as salt,f as scrypt,t as scryptBlockMix,n as scryptROMix};
